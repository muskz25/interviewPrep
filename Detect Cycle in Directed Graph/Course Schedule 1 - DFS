class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
       ArrayList<ArrayList<Integer>> adj = new ArrayList<>(numCourses);
       for(int i=0;i<numCourses;i++){
          adj.add(new ArrayList<>());
       } 

       for(int [] prerequisite : prerequisites){
           adj.get(prerequisite[1]).add(prerequisite[0]);
       }

       boolean[] vis = new boolean[numCourses];
       boolean[] inStack = new boolean[numCourses];
       for (int i = 0; i < numCourses; i++) {
            if (dfs(i, adj, vis, inStack)) {
                return false;
            }
        }
        return true;
    }

    public boolean dfs(int node,ArrayList<ArrayList<Integer>> adj,boolean[] vis,boolean[] inStack){
        vis[node] = true;
        inStack[node] = true;
       
        for(int it : adj.get(node)){
            if(vis[it]==false){
                if(dfs(it,adj,vis,inStack)==true)
                return true;
            }
            else if(inStack[it]==true){
                return true;
            }
        }
        inStack[node]=false;
        return false;    
    }
}
