class Solution {
    class DisjointSet{
        List<Integer> rank = new ArrayList<>();
        List<Integer> size = new ArrayList<>();
        List<Integer> parent = new ArrayList<>();
        public DisjointSet(int n){
            for(int i=0;i<n;i++){
                rank.add(0);
                parent.add(i);
                size.add(1);
            }
        }

        public int findPar(int node){
            if(node == parent.get(node))
            return node;
            
            int ulp= findPar(parent.get(node));
            parent.set(node,ulp);
            return parent.get(node);
        }

        public void unionByRank(int ulp_u,int ulp_v){
             ulp_u = findPar(ulp_u);
             ulp_v = findPar(ulp_v);
            if(ulp_u == ulp_v) return;
            if(rank.get(ulp_u)<rank.get(ulp_v)){
                parent.set(ulp_u,ulp_v);
            }
            else if(rank.get(ulp_v)<rank.get(ulp_u)){
                parent.set(ulp_v,ulp_u);
            }
            else{
                parent.set(ulp_v,ulp_u);
                int rankU=rank.get(ulp_u);
                rank.set(ulp_u,rankU + 1);
            }
        }

        public void unionBySize(int ulp_u,int ulp_v){
             ulp_u = findPar(ulp_u);
             ulp_v = findPar(ulp_v);
            if(ulp_u == ulp_v) return;
            if(size.get(ulp_u)<size.get(ulp_v)){
                 parent.set(ulp_u,ulp_v);
                 size.set(ulp_v,size.get(ulp_u) + size.get(ulp_v));
            }else{
                 parent.set(ulp_v,ulp_u);
                  size.set(ulp_u,size.get(ulp_u) + size.get(ulp_v));
            }
        }
    }
    public List<List<String>> accountsMerge(List<List<String>> accounts) {
         int n=accounts.size();
        DisjointSet ds = new DisjointSet(n);
       
        HashMap<String,Integer> map = new HashMap<>();
        for(int i=0;i<n;i++){
            for(int j=1;j<accounts.get(i).size();j++){
                String mail = accounts.get(i).get(j);
                if(!map.containsKey(mail))
                    map.put(mail,i);
                else
                    ds.unionBySize(i,map.get(mail));
            }
        }

        ArrayList<String>[] mergedMail = new ArrayList[n];
        for(int i=0;i<n;i++){
            mergedMail[i] = new ArrayList<String>();
        }
        for(Map.Entry<String,Integer> m : map.entrySet()){
            String mail = m.getKey();
            int node = ds.findPar(m.getValue());
            mergedMail[node].add(mail);
        }

        List<List<String>> ans = new ArrayList<>();
        for(int i = 0 ; i <n ;i++){
            if(mergedMail[i].size()==0) continue;
            Collections.sort(mergedMail[i]);
            List<String> temp = new ArrayList<>();
            temp.add(accounts.get(i).get(0)); 
            for(String it : mergedMail[i]){
                temp.add(it);
            }
            ans.add(temp);
            }

            return ans;  
    }
}
