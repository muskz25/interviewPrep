class Solution {
    public List<List<String>> findLadders(String beginWord, String endWord, List<String> wordList) {
        List<List<String>> ans = new ArrayList<>();
        Queue<ArrayList<String>> q = new LinkedList<>();
        ArrayList<String> ls = new ArrayList<>();
        ls.add(beginWord);
        q.add(ls);
        ArrayList<String> usedonlevel = new ArrayList<>();
        usedonlevel.add(beginWord);
        int level = 0;
        Set<String> st = new HashSet<>();
        for(String it : wordList)
         st.add(it);

        while(!q.isEmpty()){
            ArrayList<String> vec= q.peek();
            q.poll();

            if(vec.size()>level){
                level++;
                for(String it : usedonlevel){
                    st.remove(it);
                }
            }

            String word=vec.get(vec.size()-1);
            if(word.equals(endWord)){
                if(ans.size()==0) ans.add(vec);
                else if(ans.get(0).size()==vec.size()) ans.add(vec);
            }

            for(int i=0;i<word.length();i++){
                for(char ch='a'; ch<='z'; ch++){
                    char replaceCharArray[] = word.toCharArray();
                    replaceCharArray[i]=ch;
                    String replaceWord = new String(replaceCharArray);
                    if(st.contains(replaceWord)){
                        vec.add(replaceWord);
                        ArrayList<String> temp = new ArrayList<>(vec);
                        q.add(temp);
                        usedonlevel.add(replaceWord);
                        vec.remove(vec.size()-1);
                    }
                }
            }
        }
        return ans;
    }
}
