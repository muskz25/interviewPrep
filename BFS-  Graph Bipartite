class Solution {
    public boolean check(int start,int n,int[][] graph,int[] color) {
       Queue<Integer> q = new LinkedList<>();
       q.add(start);
       color[start]=1;
       while(!q.isEmpty()){
           int ele=q.poll();
           for(Integer it : graph[ele]){
               if(color[it]==-1){
                  color[it]=1-color[ele];
                  q.add(it); 
               }
               else if(color[it]==color[ele])
               return false;
           }
       }
       return true; 
    }

      public boolean isBipartite(int[][] graph) {
          int n=graph.length;
          int color[]=new int[n];
          Arrays.fill(color,-1);
          for(int i=0;i<n;i++){
            if(color[i]==-1){
                if(check(i,n,graph,color)==false){
                    return false;
                }
            }
          }
          return true;
      }
}
