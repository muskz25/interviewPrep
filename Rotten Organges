class Pair{
    int first;
    int second;
    int time;

     public Pair(int first, int second,int time){
        this.first = first;
        this.second = second;
        this.time=time;
    }
}
class Solution {
    public int orangesRotting(int[][] grid) {
        int n=grid.length;
        int m=grid[0].length;
        Queue<Pair> q=new LinkedList<>();
        int[][] vis=new int[n][m];
        int countFresh=0;
        int ans_time=0;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]==2){
                    vis[i][j]=2;
                    q.add(new Pair(i,j,0));
                }else if(grid[i][j]==1){
                    countFresh++;
                }
                else{
                    vis[i][j]=0;
                }
            }
        }
        int dr[] = {-1,0,1,0};
        int dc[] = {0,-1,0,1};
        int count=0;
        while(!q.isEmpty()){
            int r=q.peek().first;
            int c=q.peek().second;
            int t=q.peek().time;
            ans_time=Math.max(ans_time,t);
            q.remove();
            for(int i=0;i<4;i++){
                int row=r+dr[i];
                int col=c+dc[i];
              while(row>=0 && row<n && col>=0 && col<m && vis[row][col]==0 && grid[row][col]==1){
                  q.add(new Pair(row,col,t+1));
                  vis[row][col]=2;
                  count++;
              }
            }
        }

        if(count!=countFresh) return -1;
        return ans_time;

    }
}
