class Solution {
    public List<List<Integer>> allPathsSourceTarget(int[][] graph) {
       List<List<Integer>> ans =new ArrayList<>();
       int n =graph.length-1;
       boolean vis[] = new boolean[graph.length+1];
        dfs(0,ans,new ArrayList<>(),n,graph,vis);
        return ans;
    }

    public void dfs(int node,List<List<Integer>> ans,ArrayList<Integer> list,int n,int[][]graph,boolean []vis){

        if(node==n){
            list.add(n);
            ans.add(new ArrayList<>(list));
        }
        else{
            list.add(node);
            vis[node]=true;
            for(int it : graph[node]){    
              if(vis[it]==false)
              dfs(it,ans,list,n,graph,vis);
            }
        }
            vis[node]=false;
            list.remove(list.size()-1);
    }

}
