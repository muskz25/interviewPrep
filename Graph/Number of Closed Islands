class Solution {
    
    public int closedIsland(int[][] grid) {
        int m = grid.length, n = grid[0].length;
    
        for (int i = 0; i < m; i++) {
            dfs(i, 0, grid);
            dfs(i, n-1, grid);
        }
        for (int j = 0; j < n; j++) {
            dfs(0, j, grid);
            dfs(m-1, j, grid);
        }
         int count = 0;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==0){
                    dfs(i,j,grid);
                    count++; 
                }
            }
        }
        return count;
    }
    
    public void dfs(int i, int j, int[][] grid) {
        int m = grid.length, n = grid[0].length;
        if (i < 0 || i >= m || j < 0 || j >= n || grid[i][j] != 0)
            return;

        grid[i][j] = 1;
         int dr[][] ={{0,1},{0,-1},{-1,0},{1,0}};
        for(int k=0;k<4;k++){
            int row= i + dr[k][0];
            int col= j + dr[k][1];
        dfs(row,col,grid);
        
        }  
    }
}
