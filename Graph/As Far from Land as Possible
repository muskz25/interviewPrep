class Solution {
    public int maxDistance(int[][] grid) {
        int n=grid.length;
        int vis[][] = new int[n][n];
        Queue<int[]> q = new LinkedList<>();
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
              if(grid[i][j]==1){
                  q.add(new int[]{i, j});
              }  
            }
        }
        if(q.size()==n*n || q.isEmpty()){
            return -1;
        }
        int[][] dir = {{1,0},{0,1},{-1,0},{0,-1}};
        int res = -1;
        while(!q.isEmpty()){
            int size = q.size();
            res++;
            while (size-- > 0) {
            int[] cell = q.poll();
            int row = cell[0];
            int col = cell[1];  
            for(int i=0;i<4;i++){
                int nrow= row + dir[i][0];
                int ncol= col + dir[i][1];
            if(nrow>=0 && nrow<n && ncol>=0 && ncol<n && grid[nrow][ncol] == 0){
                grid[nrow][ncol] = 1;
                q.offer(new int[]{nrow, ncol});
            }
        }        
    }
    }
    return res;   
    }
}
