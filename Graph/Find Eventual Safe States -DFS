class Solution {
    public List<Integer> eventualSafeNodes(int[][] graph) {
        List<List<Integer>> adj = new ArrayList<>();
         int V = graph.length;
        for(int i=0;i<V;i++){
         List<Integer> list = new ArrayList<>();
             for(int j=0;j<graph[i].length;j++){
           list.add(graph[i][j]);
             }
             adj.add(list);
        }
        List<Integer> ans = new ArrayList<>();
        
        int vis[] = new int[V];
        int pathVis[] = new int[V];
        int check[] = new int[V];
        
        for(int i=0;i<V;i++){
            if(vis[i]!=1){
                dfs(i,vis,pathVis,check,adj);
            }
        }
        for(int i=0;i<V;i++){
            if(check[i]==1)
                ans.add(i);
        }
        return ans;
    }
    
    public boolean dfs(int node,int vis[],int pathVis[],int check[],List<List<Integer>> adj){
        vis[node]=1;
        pathVis[node] =1;
        check[node]=0;
        for(int it : adj.get(node)){
            if(vis[it]!=1){
                vis[it]=1;
                pathVis[it]=1;
                if(dfs(it,vis,pathVis,check,adj)==true)
                return true;
            }
            else if(pathVis[it]==1){
               return true;
            }
        }
        check[node]=1;
        pathVis[node]=0;
        return false;
    }
    }
