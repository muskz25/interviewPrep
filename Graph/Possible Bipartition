class Solution {
    public boolean possibleBipartition(int n, int[][] dislikes) {
       int[][] graph = new int[n + 1][n + 1];
    
       for(int[] dislike : dislikes) {
        graph[dislike[0]][dislike[1]] = 1;
        graph[dislike[1]][dislike[0]] = 1;
    }

       int[] color = new int[n+1];
       Arrays.fill(color,-1);
        for (int i = 1; i <= n; i++) {
            if(color[i]==-1){
                if(!isBipartiate(graph,color,i,0))
                return false;
            }
        }
        return true;
    }

    public boolean isBipartiate(int[][] graph,int[] color,int node,int col){
            if(color[node] != -1) {
            return color[node] == col;
    }
    
    color[node] = col;
          for (int i = 1; i < graph[node].length; i++) {
               if (graph[node][i] == 1 && !isBipartiate(graph, color,i, 1 - col)) {
            return false;
        }
    }
    
    return true;
}
}
