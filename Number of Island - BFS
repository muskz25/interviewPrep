class Pair{
    int first;
    int second;
    public Pair(int first, int second){
        this.first = first;
        this.second = second;
    }
}
class Solution {
    public void bfs(int row, int col, boolean[][] vis, char[][] grid){
        vis[row][col] = true;
        Queue<Pair> q = new LinkedList<Pair>();
        q.add(new Pair(row, col));
        int n = grid.length;
        int m = grid[0].length;
        int dr[] ={-1,0,1,0};
        int dc[] ={0,-1,0,1};
        while(!q.isEmpty()){
            int ro = q.peek().first;
            int co = q.peek().second;
            q.remove();  
					for(int i=0;i<4;i++){
                        int nRow = ro + dr[i];
                        int nCol = co + dc[i];
              if(nRow >= 0 && nRow < n && nCol >= 0 && nCol < m 
              && grid[nRow][nCol] == '1' && vis[nRow][nCol] == false){
                            vis[nRow][nCol] = true;
                            q.add(new Pair(nRow, nCol));
                        }
                    }
                }
            
        
    }
    public int numIslands(char[][] grid) {
        int n = grid.length;
        int m = grid[0].length;
        int cnt = 0;
        boolean[][] vis = new boolean[n][m];
        
        for(int row = 0; row < n; row++){
            for(int col = 0; col < m; col++){
                if(vis[row][col]==false && grid[row][col] == '1'){
                    cnt++;
                    bfs(row, col, vis, grid);
                }
            }
        }
        return cnt;
    }
}
